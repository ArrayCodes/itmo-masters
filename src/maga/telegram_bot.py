"""
Telegram –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã ITMO
"""

import asyncio
import logging

from program_analyzer import ProgramAnalyzer
from telegram import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from web_parser import ITMOWebParser, Program

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ENTERING_BACKGROUND, CHOOSING_PROGRAM = range(3)


class ITMOTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û"""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
    MAX_MESSAGE_LENGTH = 4096
    MAX_COURSES_DISPLAY = 10

    def __init__(self, token: str) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = token
        self.application = Application.builder().token(token).build()
        self.programs: list[Program] | None = None
        self.analyzer: ProgramAnalyzer | None = None
        self.user_states: dict[int, dict] = {}
        self.user_backgrounds: dict[int, str] = {}
        self.user_program_selections: dict[int, str] = {}
        self.user_career_selections: dict[int, str] = {}
        self.user_admission_selections: dict[int, str] = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler('start', self.start_command))
        self.application.add_handler(CommandHandler('help', self.help_command))
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
        self.application.add_handler(CallbackQueryHandler(self.button_callback))

    async def _load_programs(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
        try:
            async with ITMOWebParser() as parser:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º
                ai_html = await parser.fetch_page('https://abit.itmo.ru/program/master/ai')
                ai_product_html = await parser.fetch_page(
                    'https://abit.itmo.ru/program/master/ai_product'
                )

                if ai_html and ai_product_html:
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    ai_program = parser.parse_ai_program(ai_html)
                    ai_product_program = parser.parse_ai_product_program(ai_product_html)

                    self.programs = [ai_program, ai_product_program]
                    self.analyzer = ProgramAnalyzer(self.programs)

                    logger.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.programs)} –ø—Ä–æ–≥—Ä–∞–º–º')
                else:
                    logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º')

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º: {e}')

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not self.programs:
            await update.message.reply_text('üìö –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö...')
            await self._load_programs()
            if self.programs:
                await update.message.reply_text(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.programs)} –ø—Ä–æ–≥—Ä–∞–º–º!')
            else:
                await update.message.reply_text('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö')

        welcome_text = """
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã ITMO!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ AI Product Management

üí¨ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?
        """

        keyboard = [
            [InlineKeyboardButton('üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data='compare')],
            [InlineKeyboardButton('üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data='recommend')],
            [InlineKeyboardButton('üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', callback_data='program_info')],
            [InlineKeyboardButton('üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏', callback_data='career')],
            [InlineKeyboardButton('üéì –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å', callback_data='admission')],
            [InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_text.strip(), reply_markup=reply_markup)

        return CHOOSING_ACTION

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìö –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:
‚Ä¢ üìä –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
‚Ä¢ üí° –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üéØ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
‚Ä¢ üíº –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø—É—Ç—è—Ö
‚Ä¢ üéì –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏

üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –í—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
2. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –±—ç–∫–≥—Ä–∞—É–Ω–¥ (–æ–ø—ã—Ç, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –Ω–∞–≤—ã–∫–∏)
3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

üîç –ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏—è –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞:
‚Ä¢ "–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ Python –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"
‚Ä¢ "–Ø —Ä–∞–±–æ—Ç–∞—é –≤ —Å—Ñ–µ—Ä–µ –±–∏–∑–Ω–µ—Å–∞ –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"
‚Ä¢ "–£ –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        """
        
        await update.message.reply_text(help_text.strip())

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == 'compare':
            await self._handle_compare(query)
        elif query.data == 'recommend':
            await self._handle_recommend_start(query)
        elif query.data == 'program_info':
            await self._handle_program_info_start(query)
        elif query.data == 'career':
            await self._handle_career_start(query)
        elif query.data == 'admission':
            await self._handle_admission_start(query)
        elif query.data == 'help':
            await self._handle_help(query)
        elif query.data.startswith('program_'):
            await self._handle_program_selection(query)
        elif query.data.startswith('career_'):
            await self._handle_career_program(query)
        elif query.data.startswith('admission_'):
            await self._handle_admission_program(query)
        elif query.data == 'back_to_main':
            await self._back_to_main_menu(query)

    async def _handle_compare(self, query: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if not self.programs or not self.analyzer:
            await query.edit_message_text('üìö –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö...')
            await self._load_programs()
            if not self.programs or not self.analyzer:
                await query.edit_message_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö')
                return
            await query.edit_message_text('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –§–æ—Ä–º–∏—Ä—É—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...')

        comparison = self.analyzer.get_program_comparison()

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(comparison) > self.MAX_MESSAGE_LENGTH:
            parts = [
                comparison[i : i + self.MAX_MESSAGE_LENGTH]
                for i in range(0, len(comparison), self.MAX_MESSAGE_LENGTH)
            ]
            for i, part in enumerate(parts):
                if i == 0:
                    await query.edit_message_text(part)
                else:
                    await query.message.reply_text(part)
        else:
            await query.edit_message_text(comparison)

        await self._show_back_button(query)

    async def _handle_recommend_start(self, query: CallbackQuery) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if not self.programs or not self.analyzer:
            await query.edit_message_text('üìö –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö...')
            await self._load_programs()
            if not self.programs or not self.analyzer:
                await query.edit_message_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö')
                return

        user_id = query.from_user.id
        logger.info(f'–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')

        # –í—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥ (–Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        logger.info(f'–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥
        await query.edit_message_text(
            'üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!\n\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä:\n'
            "‚Ä¢ '–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ Python –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ'\n"
            "‚Ä¢ '–Ø —Ä–∞–±–æ—Ç–∞—é –≤ —Å—Ñ–µ—Ä–µ –±–∏–∑–Ω–µ—Å–∞ –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞'\n"
            "‚Ä¢ '–£ –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'\n\n"
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞:'
        )

        self.user_states[user_id] = {'action': 'waiting_background'}
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'waiting_background' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ENTERING_BACKGROUND')
        return ENTERING_BACKGROUND

    async def _handle_program_info_start(self, query: CallbackQuery) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        keyboard = [
            [InlineKeyboardButton('–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', callback_data='program_ai')],
            [InlineKeyboardButton('AI Product Management', callback_data='program_ai_product')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', reply_markup=reply_markup
        )

    async def _handle_career_start(self, query: CallbackQuery) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—å–µ—Ä–µ"""
        keyboard = [
            [InlineKeyboardButton('–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', callback_data='career_ai')],
            [InlineKeyboardButton('AI Product Management', callback_data='career_ai_product')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            'üíº –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø—É—Ç—è—Ö:',
            reply_markup=reply_markup,
        )

    async def _handle_admission_start(self, query: CallbackQuery) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏"""
        keyboard = [
            [InlineKeyboardButton('–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', callback_data='admission_ai')],
            [InlineKeyboardButton('AI Product Management', callback_data='admission_ai_product')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            'üéì –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏:',
            reply_markup=reply_markup,
        )

    async def _handle_program_selection(self, query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        program_name = query.data.replace('program_', '')

        if program_name == 'ai':
            program_display_name = '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
        elif program_name == 'ai_product':
            program_display_name = 'AI Product Management'
        else:
            await query.edit_message_text('‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return

        if not self.analyzer:
            await query.edit_message_text(
                '‚è≥ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
            return

        info = self.analyzer.get_detailed_program_info(program_display_name)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(info) > self.MAX_MESSAGE_LENGTH:
            parts = [
                info[i : i + self.MAX_MESSAGE_LENGTH]
                for i in range(0, len(info), self.MAX_MESSAGE_LENGTH)
            ]
            for i, part in enumerate(parts):
                if i == 0:
                    await query.edit_message_text(part)
                else:
                    await query.message.reply_text(part)
        else:
            await query.edit_message_text(info)

        await self._show_back_button(query)

    async def _handle_career_program(self, query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—å–µ—Ä–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        program_name = query.data.replace('career_', '')

        if program_name == 'ai':
            program_display_name = '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
        elif program_name == 'ai_product':
            program_display_name = 'AI Product Management'
        else:
            await query.edit_message_text('‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return

        if not self.analyzer:
            await query.edit_message_text(
                '‚è≥ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
            return

        career_info = self.analyzer.get_career_paths(program_display_name)

        await query.edit_message_text(career_info)
        await self._show_back_button(query)

    async def _handle_admission_program(self, query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        program_name = query.data.replace('admission_', '')

        if program_name == 'ai':
            program_display_name = '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
        elif program_name == 'ai_product':
            program_display_name = 'AI Product Management'
        else:
            await query.edit_message_text('‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return

        if not self.analyzer:
            await query.edit_message_text(
                '‚è≥ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
            return

        admission_info = self.analyzer.get_admission_info(program_display_name)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(admission_info) > self.MAX_MESSAGE_LENGTH:
            parts = [
                admission_info[i : i + self.MAX_MESSAGE_LENGTH]
                for i in range(0, len(admission_info), self.MAX_MESSAGE_LENGTH)
            ]
            for i, part in enumerate(parts):
                if i == 0:
                    await query.edit_message_text(part)
                else:
                    await query.message.reply_text(part)
        else:
            await query.edit_message_text(admission_info)

        await self._show_back_button(query)

    async def _handle_help(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º** - –ø–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º
2Ô∏è‚É£ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
3Ô∏è‚É£ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ** - —É–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
4Ô∏è‚É£ **–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏** - —É–∑–Ω–∞–π—Ç–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
5Ô∏è‚É£ **–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å** - –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–∞—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è

üí° **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –µ—Å—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ò–ò?"
‚Ä¢ "–ß—Ç–æ –∏–∑—É—á–∞—é—Ç –≤ AI Product Management?"
‚Ä¢ "–ö–∞–∫–∏–µ –≤—ã–±–æ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞?"
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"

üéØ **–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:**
‚Ä¢ –ü–æ–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
‚Ä¢ –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö
‚Ä¢ –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        """

        await query.edit_message_text(help_text.strip())
        await self._show_back_button(query)

    async def _show_recommendations(self, query, background: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è CallbackQuery)"""
        if not self.analyzer:
            await query.edit_message_text(
                '‚è≥ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
            return

        recommendations = self.analyzer.get_course_recommendations(background)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(recommendations) > self.MAX_MESSAGE_LENGTH:
            parts = [
                recommendations[i : i + self.MAX_MESSAGE_LENGTH]
                for i in range(0, len(recommendations), self.MAX_MESSAGE_LENGTH)
            ]
            for i, part in enumerate(parts):
                if i == 0:
                    await query.edit_message_text(part)
                else:
                    await query.message.reply_text(part)
        else:
            await query.edit_message_text(recommendations)

        await self._show_back_button(query)

    async def _show_recommendations_for_message(self, update: Update, background: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        print(f"üîç _show_recommendations_for_message –≤—ã–∑–≤–∞–Ω —Å –±—ç–∫–≥—Ä–∞—É–Ω–¥–æ–º: '{background}'")
        print(f'üìä self.analyzer: {self.analyzer}')
        print(f"üìö self.programs: {len(self.programs) if self.programs else 'None'}")

        if not self.analyzer:
            print('‚ùå self.analyzer —Ä–∞–≤–µ–Ω None!')
            await update.message.reply_text(
                '‚è≥ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
            return

        print(f"‚úÖ –í—ã–∑—ã–≤–∞–µ–º analyzer.get_course_recommendations('{background}')")
        recommendations = self.analyzer.get_course_recommendations(background)
        print(f'üìù –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª–∏–Ω–æ–π: {len(recommendations)}')

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(recommendations) > self.MAX_MESSAGE_LENGTH:
            parts = [
                recommendations[i : i + self.MAX_MESSAGE_LENGTH]
                for i in range(0, len(recommendations), self.MAX_MESSAGE_LENGTH)
            ]
            for _i, part in enumerate(parts):
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(recommendations)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self._show_back_button_for_message(update)

    async def _show_back_button_for_message(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        keyboard = [[InlineKeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

    async def _show_back_button(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [[InlineKeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

    async def _back_to_main_menu(self, query):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è CallbackQuery
        welcome_text = """
üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã ITMO!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ AI Product Management

üí¨ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?
        """

        keyboard = [
            [InlineKeyboardButton('üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data='compare')],
            [InlineKeyboardButton('üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data='recommend')],
            [InlineKeyboardButton('üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', callback_data='program_info')],
            [InlineKeyboardButton('üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏', callback_data='career')],
            [InlineKeyboardButton('üéì –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å', callback_data='admission')],
            [InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(welcome_text.strip(), reply_markup=reply_markup)

        return CHOOSING_ACTION

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text

        logger.info('=== handle_message –≤—ã–∑–≤–∞–Ω ===')
        logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}')
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user_states.get(user_id, '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
        logger.info('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler: ENTERING_BACKGROUND')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        print(f'   user_states: {self.user_states}')
        print(
            f"   action: {self.user_states.get(user_id, {}).get('action') if user_id in self.user_states else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}"
        )

        if (
            user_id in self.user_states
            and self.user_states[user_id].get('action') == 'waiting_background'
        ):
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±—ç–∫–≥—Ä–∞—É–Ω–¥: '{text}'")
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±—ç–∫–≥—Ä–∞—É–Ω–¥')

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±—ç–∫–≥—Ä–∞—É–Ω–¥ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
            self.user_states[user_id] = {}

            await update.message.reply_text(
                '‚úÖ –°–ø–∞—Å–∏–±–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ–ø—ã—Ç –∏ —Ñ–æ—Ä–º–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...'
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print('üöÄ –í—ã–∑—ã–≤–∞–µ–º _show_recommendations_for_message')
            await self._show_recommendations_for_message(update, text)
            return CHOOSING_ACTION
        else:
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞')

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ç–∫–≥—Ä–∞—É–Ω–¥, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
            response = await self._analyze_question(text)
            await update.message.reply_text(response)

    async def _analyze_question(self, question: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç"""
        question_lower = question.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if not self.programs:
            return 'üìö –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ –∫–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç
        program_mentioned = None
        if any(word in question_lower for word in ['–∏–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'ai']):
            program_mentioned = next(
                (p for p in self.programs if '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in p.name.lower()), None
            )
        elif any(word in question_lower for word in ['–ø—Ä–æ–¥—É–∫—Ç', 'product', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç']):
            program_mentioned = next(
                (p for p in self.programs if 'product' in p.name.lower()), None
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if program_mentioned:
            response = f'üéØ {program_mentioned.name}:\n\n'

            if any(word in question_lower for word in ['–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–∫—É—Ä—Å', '–ø—Ä–µ–¥–º–µ—Ç', '–∏–∑—É—á–∞—é—Ç']):
                response += 'üìö –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n'
                for course in program_mentioned.courses[
                    : self.MAX_COURSES_DISPLAY
                ]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    response += (
                        f'‚Ä¢ {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {course.semester} —Å–µ–º–µ—Å—Ç—Ä)\n'
                    )

                if len(program_mentioned.courses) > self.MAX_COURSES_DISPLAY:
                    response += f'\n... –∏ –µ—â–µ {len(program_mentioned.courses) - self.MAX_COURSES_DISPLAY} –¥–∏—Å—Ü–∏–ø–ª–∏–Ω'
            else:
                response += f'üìñ {program_mentioned.description}\n\n'
                response += f'‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program_mentioned.duration} —Å–µ–º–µ—Å—Ç—Ä–∞\n'
                response += f'üéì –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {program_mentioned.total_credits}'
        else:
            response = (
                'ü§î –Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ, '
                '–æ –∫–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏–¥–µ—Ç —Ä–µ—á—å:\n'
                '‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n'
                '‚Ä¢ AI Product Management\n\n'
                '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.'
            )

        return response

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.token).build()

        # –°–æ–∑–¥–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start_command)],
            states={
                CHOOSING_ACTION: [CallbackQueryHandler(self.button_callback)],
                ENTERING_BACKGROUND: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
                ],
            },
            fallbacks=[CommandHandler('start', self.start_command)],
            per_message=False,
            per_chat=True,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(conv_handler)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ ConversationHandler –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–æ–∫–µ–Ω–∞
    bot = ITMOTelegramBot('YOUR_BOT_TOKEN_HERE')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await bot._load_programs()

    print('‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    print(f'üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: {len(bot.programs)}')

    if bot.programs:
        print('\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º:')
        if bot.analyzer:
            print(bot.analyzer.get_program_comparison())


if __name__ == '__main__':
    asyncio.run(main())
