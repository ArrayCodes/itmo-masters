"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
"""

import os

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()


class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    # Telegram Bot Token
    TELEGRAM_TOKEN: str | None = os.getenv('TELEGRAM_BOT_TOKEN')

    # URLs –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    AI_PROGRAM_URL = 'https://abit.itmo.ru/program/master/ai'
    AI_PRODUCT_PROGRAM_URL = 'https://abit.itmo.ru/program/master/ai_product'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
    PARSER_TIMEOUT = 30  # —Å–µ–∫—É–Ω–¥—ã
    PARSER_RETRY_COUNT = 3

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    BOT_COMMAND_TIMEOUT = 60  # —Å–µ–∫—É–Ω–¥—ã
    MAX_MESSAGE_LENGTH = 4096  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    MAX_COURSES_DISPLAY = 10  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    RECOMMENDATION_TOP_N = 3  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    MIN_TOKEN_LENGTH = 10

    @classmethod
    def validate(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not cls.TELEGRAM_TOKEN:
            print('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
            print('   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: TELEGRAM_BOT_TOKEN=your_token_here')
            return False

        if len(cls.TELEGRAM_TOKEN) < cls.MIN_TOKEN_LENGTH:
            print('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN')
            print(
                f'   –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ {cls.MIN_TOKEN_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤'
            )
            return False

        print('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞')
        return True

    @classmethod
    def print_info(cls) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞:')
        print(
            f"   ‚Ä¢ Telegram Token: {'*' * 10 + cls.TELEGRAM_TOKEN[-4:] if cls.TELEGRAM_TOKEN else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
        )
        print(f'   ‚Ä¢ AI Program URL: {cls.AI_PROGRAM_URL}')
        print(f'   ‚Ä¢ AI Product Program URL: {cls.AI_PRODUCT_PROGRAM_URL}')
        print(f'   ‚Ä¢ Parser Timeout: {cls.PARSER_TIMEOUT}s')
        print(f'   ‚Ä¢ Log Level: {cls.LOG_LEVEL}')
        print(f'   ‚Ä¢ Max Courses Display: {cls.MAX_COURSES_DISPLAY}')
        print(f'   ‚Ä¢ Recommendation Top N: {cls.RECOMMENDATION_TOP_N}')


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()
